def alphabeta(node, depth, alpha, beta, maximizingPlayer):
    if depth == 0 or node not in tree:
        return values.get(node, 0)
    if maximizingPlayer:
        max_eval = -float('inf')
        for child in tree[node]:
            eval = alphabeta(child, depth-1, alpha, beta, False)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float('inf')
        for child in tree[node]:
            eval = alphabeta(child, depth-1, alpha, beta, True)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

tree = {'A': ['B', 'C'], 'B': ['D', 'E'], 'C': ['F', 'G']}
values = {'D': 3, 'E': 5, 'F': 6, 'G': 9}
print(alphabeta('A', 3, -float('inf'), float('inf'), True))
